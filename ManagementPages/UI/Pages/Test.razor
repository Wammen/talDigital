@page "/Test";

@using ManagementPages.Functions;
@using ManagementPages.Functions.DbTableModels;
@using ManagementPages.Model;
@using Microsoft.Extensions.Configuration;


@inject IDbService _data;
@inject IConfiguration _config;

<h3>Test Page</h3>


<h4>Insert new test</h4>
<EditForm Model="@newTest" OnValidSubmit="@InsertTest">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <InputNumber id="id" @bind-Value="newTest.ID"> </InputNumber>
    <InputText id="name" @bind-Value="newTest.Name">  </InputText>

    <button type="submit">Submit</button>
</EditForm>

<h4>Update test where id = 1</h4>
<EditForm Model="@updateTest" OnValidSubmit="@UpdateData">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <InputNumber id="id" @bind-Value="updateTest.ID"> </InputNumber>
    <InputText id="name" @bind-Value="updateTest.Name">  </InputText>

    <button type="submit">Submit</button>
</EditForm>

<h4>Delete test</h4>
<EditForm Model="@deleteTest" OnValidSubmit="@DeleteData">

    <InputNumber id="id" @bind-Value="deleteTest.ID"> </InputNumber>

    <button type="submit">Submit</button>
</EditForm>



<h4>Current</h4>
@if (test == null)
{
    <p>Loading..</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var elem in test)
            {
                <tr>
                    <td>@elem.ID</td>
                    <td>@elem.Name</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private List<TestModel> test;
    private TestModel newTest = new TestModel();
    private TestModel updateTest = new TestModel();
    private TestModel deleteTest = new TestModel();

    protected override async Task OnInitializedAsync()
    {
        //skal ind i en metode i functions.. samme med de andre ting under..
        string sql = "select * from test";
        test = await _data.LoadData<TestModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

    }

    private async Task DeleteData()
    {
        TestModel deleteT = new TestModel
        {
            ID = deleteTest.ID,
            //Name = deleteTest.Name
        };

        string sql = @"delete from test
                   where id = @ID";

        await _data.SaveData(sql, deleteT, _config.GetConnectionString("default"));

        deleteT = new TestModel();

        await OnInitializedAsync();
    }

    private async Task UpdateData()
    {
        TestModel updateT = new TestModel
        {
            ID = updateTest.ID,
            Name = updateTest.Name
        };

        string sql = @"update test
                   set id = @ID, name = (@Name)
                   where id = 1";

        await _data.SaveData(sql, updateT, _config.GetConnectionString("default"));

        updateTest = new TestModel();

        await OnInitializedAsync();
    }

    private async Task InsertTest()
    {
        TestModel t = new TestModel
        {
            ID = newTest.ID,
            Name = newTest.Name

        };

        string sql = @"insert into test (id, name)
                        values (@ID, @Name);";

        await _data.SaveData(sql, t, _config.GetConnectionString("default"));

        test.Add(t);

        newTest = new TestModel();
    }


}
