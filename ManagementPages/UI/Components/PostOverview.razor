@using ManagementPages.Functions
@using ManagementPages.Model
@using ManagementPages.UI.Components.Modals
@using System.Linq

@inject IDbService _dbService

<NewPost @ref="NewPost" OnChangesMade="OnChangesMadeInChildComponent" />
<EditPost @ref="EditPost" OnChangesMade="OnChangesMadeInChildComponent" />
<DeletePost @ref="DeletePost" OnChangesMade="OnChangesMadeInChildComponent" />

<div class="col bg-white rounded">
    <div class="p-2 border-2 border-bottom">
        @if (SelectedInformationBoard.Categories.Count > 0)
        {
            <button @onclick="() => NewPost.Open(SelectedInformationBoard.SelectedCategory)" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i>
                Nyt opslag
            </button>
        }

        <div class="dropdown float-end">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                Rediger rækkefølge på opslag
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><a class="dropdown-item" href="#">Alfabetisk</a></li>
                <li><a class="dropdown-item" href="#">Ældste til nyeste</a></li>
                <li><a class="dropdown-item" href="#">Nyeste til ældste</a></li>
            </ul>
        </div>
    </div>
    @if (SelectedInformationBoard?.SelectedCategory?.Posts?.Count > 0)
    {
        @foreach (var post in SelectedInformationBoard.SelectedCategory.Posts.OrderByDescending(x => x.PostModel.PostId))
        {
            @if (post.PostModel.IsPublished)
            {
                <div class="row m-1">
                    <div class="fs-4 fw-bolder text-capitalize">
                        @post.PostModel.Title
                    </div>
                    <div class="fs-6 fw-light text-muted text-capitalize mt-0">
                        @post.PostModel.Author
                    </div>
                    <a href="@post.PostModel.Link">@post.PostModel.Link</a>
                    <div>
                        <div class="fw-normal mt-1 mb-0">
                            @post.PostModel.Text
                            <div class="float-end">
                                <button @onclick="() => EditExistingPost(post)" class="btn ms-1 p-0"><i class="bi bi-pencil"></i></button>
                                <button @onclick="() => DeletePost.Open(post)" class="btn p-0"><i class="bi bi-trash"></i></button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row m-1">
                    <div class="fs-4 fw-bolder text-muted">
                        @post.PostModel.Title
                    </div>
                    <div class="fs-6 fw-light text-muted mt-0">
                        @post.PostModel.Author
                    </div>
                        <a href="@post.PostModel.Link">@post.PostModel.Link</a>
                    <div>
                        <div class="fw-normal mt-1 mb-0 text-muted">
                            @post.PostModel.Text
                            <div class="float-end">
                                <button @onclick="() => EditExistingPost(post)" class="btn ms-1 p-0"><i class="bi bi-pencil"></i></button>
                                <button @onclick="() => DeletePost.Open(post)" class="btn p-0"><i class="bi bi-trash"></i></button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="border-2 border-bottom"></div>
        }
    }
    else
    {
        <p>Der er ingen opslag endnu...</p>
    }
</div>

@code {
        [Parameter]
        public IInformationBoardViewModel SelectedInformationBoard { get; set; } = new InformationBoardViewModel();

        [Parameter]
        public EventCallback OnChangesMade { get; set; } // a method from parent (Admin.razor) must be specified/subscribed when using the component

    public IPostViewModel SelectedPost { get; set; } = new PostViewModel();

    public void EditExistingPost(IPostViewModel selectedPost)
    {
        SelectedPost = selectedPost;
        EditPost.Open(selectedPost);
    }

    private NewPost NewPost { get; set; }
    private EditPost EditPost { get; set; }
    private DeletePost DeletePost { get; set; }

    private async Task OnChangesMadeInChildComponent()
    {
        // in order to delete a post, a post must have an ID, which means that when a new post have been added, we must
        // reload the posts from the database to get the ID of the new post
        SelectedInformationBoard.SelectedCategory.Posts = await _dbService.GetPosts(SelectedInformationBoard.SelectedCategory.CategoryModel.CategoryId);

        //  if (SelectedInformationBoard.SelectedCategory.Posts.Select(x => x).Where(x => x.PostModel.PostId == null))
        if (SelectedInformationBoard.SelectedCategory.Posts.Select(x => x).Where(x => x.PostModel.PostId == 0).Any())
        {
            // some code med at det ikke lykkedes at tilføje postet
        }
        // inform parent (Admin.razor) that changes have been made, meaning that it should rerender the entire view
        // this is done, as the displayed posts should be the ones from the selected category, so PostOverview needs to be updated
        await OnChangesMade.InvokeAsync();
    }
}
