@using ManagementPages.Services
@using ManagementPages.UI.Components.Modals
@using ManagementPages.Model.InformationBoard
@using ManagementPages.Model.Post
@inject IDbService _dbService

<NewPost @ref="NewPost" OnChangesMade="OnChangesMadeInChildComponent"/>
<EditPost @ref="EditPost" OnChangesMade="OnChangesMadeInChildComponent"/>
<DeletePost @ref="DeletePost" OnChangesMade="OnChangesMadeInChildComponent"/>

    <div class="col bg-white rounded">
        <div class="p-2 border-2 border-bottom">
            @if (SelectedInformationBoard.Categories.Count > 0)
            {
                <button @onclick="() => NewPost.Open(SelectedInformationBoard.SelectedCategory)" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i>
                    Nyt opslag
                </button>
            }
            <!-- Dropdown menu is disabled -->
            <div class="dropdown float-end">
                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false" disabled>
                    Rediger rækkefølge på opslag
                </button>
            </div>
        </div>
        @if (SelectedInformationBoard?.SelectedCategory?.Posts?.Count > 0)
        {
            @foreach (var post in SelectedInformationBoard.SelectedCategory.Posts.OrderByDescending(x => x.PostDataModel.PostId))
            {
                @if (post.PostDataModel.IsPublished)
                {
                    <div class="row m-1">
                        <div class="fs-4 fw-bolder">
                            @post.PostDataModel.Title
                        </div>
                        <div class="fs-6 fw-light text-muted mt-0">
                            @post.PostDataModel.Author
                        </div>
                        <a href="@post.PostDataModel.Link" target="_blank">@post.PostDataModel.Link</a>
                        <div class="fw-normal mt-1 mb-0">
                            @if (@post.PostDataModel.Text.Length > 350)
                            {
                                <div class="respect-newline">
                                    @post.PostDataModel.Text.Substring(0, 350)...
                                </div>
                            }
                            else
                            {
                                <div class="respect-newline">
                                    @post.PostDataModel.Text
                                </div>
                            }
                            <div class="float-end">
                                <button @onclick="() => EditExistingPost(post)" class="btn btn-sm btn-light ms-1 p-0">
                                    <i class="bi bi-pencil"></i> Rediger
                                </button>
                                <button @onclick="() => DeletePost.Open(post)" class="btn btn-sm btn-light ms-1 p-0">
                                    <i class="bi bi-trash"></i> Slet
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row m-1">
                        <div class="fs-4 fw-bolder text-muted">
                            @post.PostDataModel.Title
                        </div>
                        <div class="fs-6 fw-light text-muted mt-0">
                            @post.PostDataModel.Author
                        </div>
                        <a href="@post.PostDataModel.Link" target="_blank">@post.PostDataModel.Link</a>
                        <div class="fw-normal mt-1 mb-0 text-muted">
                            @if (@post.PostDataModel.Text.Length > 350)
                            {
                                @post.PostDataModel.Text.Substring(0, 350);
                                <span>...</span>
                            }
                            else
                            {
                                @post.PostDataModel.Text
                            }
                            <div class="float-end">
                                <button @onclick="() => EditExistingPost(post)" class="btn btn-sm btn-light ms-1 p-0">
                                    <i class="bi bi-pencil"></i> Rediger
                                </button>
                                <button @onclick="() => DeletePost.Open(post)" class="btn btn-sm btn-light ms-1 p-0">
                                    <i class="bi bi-trash"></i> Slet
                                </button>
                            </div>
                        </div>
                    </div>
                }
                <div class="border-2 border-bottom"></div>
            }
        }
        else
        {
            <p>Der er ingen opslag endnu...</p>
        }
    </div>

@code {

    [Parameter]
    public IInformationBoardModel SelectedInformationBoard { get; set; } = new InformationBoardModel();

    [Parameter]
    public EventCallback OnChangesMade { get; set; } // a method from parent (Admin.razor) must be specified/subscribed when using the component

    public IPostModel SelectedPost { get; set; } = new PostModel();

    public void EditExistingPost(IPostModel selectedPost)
    {
        SelectedPost = selectedPost;
        EditPost.Open(selectedPost);
    }

    private NewPost NewPost { get; set; }
    private EditPost EditPost { get; set; }
    private DeletePost DeletePost { get; set; }

    private async Task OnChangesMadeInChildComponent()
    {
    // inform parent (Admin.razor) that changes have been made, meaning that it should rerender the entire view
    // this is done, as the displayed posts should be the ones from the selected category, so PostOverview needs to be updated
        await OnChangesMade.InvokeAsync();
    }
}