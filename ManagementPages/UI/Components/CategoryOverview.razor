@using ManagementPages.Functions
@using ManagementPages.UI.Components.Modals
@inject IDbService _dbService
<NewCategory @ref="NewCategory" InformationBoard="@InformationBoard" OnChangesMade="OnChangesMadeInChildComponent"/>
<EditCategories @ref="EditCategories" InformationBoard="InformationBoard" OnChangesMade="OnChangesMadeInChildComponent"/>

<section class="row col">
    <div class="col">
        <p class="fw-bold fs-5 border-dark border-2 border-bottom">Kategorier</p>
        <ul class="nav nav-tabs nav-fill">
            @if (InformationBoard?.Categories?.Count > 0)
            {
                @foreach (var category in InformationBoard.Categories)
                {
                    @if (category == InformationBoard.SelectedCategory)
                    {
                        <li class="nav-item me-1">
                            <a @onclick="() => SetSelectedCategory(category)" class="nav-link active me-1" style="cursor: pointer;">
                                @category.CategoryModel.Title
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item me-1">
                            <a @onclick="() => SetSelectedCategory(category)" class="nav-link me-1" style="cursor: pointer;">
                                @category.CategoryModel.Title
                            </a>
                        </li>
                    }
                }
            }
            else
            {
                <li class="mt-2 me-1">Der er ingen kategorier endnu...</li>
            }
            <li>
                <button @onclick="() => NewCategory.Open()" class="btn btn-secondary me-1"><i class="bi bi-plus-circle"></i> Ny kategori</button>
            </li>
            <li>
                <button @onclick="() => EditCategories.Open()" class="btn btn-secondary me-1"><i class="bi bi-pencil"></i> Rediger kategorier</button>
            </li>
        </ul>
    </div>
</section>

@code {
    [Parameter]
    public IInformationBoardViewModel InformationBoard { get; set; }

    [Parameter]
    public EventCallback OnChangesMade { get; set; }

    private NewCategory NewCategory { get; set; }
    private EditCategories EditCategories { get; set; }

    private void SetSelectedCategory(ICategoryViewModel selectedCategory)
    {
        InformationBoard.SelectedCategory = selectedCategory;
        OnChangesMade.InvokeAsync();
    }

    private async Task OnChangesMadeInChildComponent()
    {
        StateHasChanged();
        InformationBoard.Categories = await _dbService.GetCategories(InformationBoard.InformationBoardModel.InformationBoardId);
        await OnChangesMade.InvokeAsync();
    }
}