@using ManagementPages.Functions
@using ManagementPages.Model
@inject IDbService _dbService
<ManagementPages.UI.Components.Modals.DeleteCategory @ref="DeleteCategory" OnChangesMade="OnChangesMadeInChildComponent"/>

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rediger kategorier - @InformationBoard.InformationBoardModel.Title</h5>
                <button @onclick="() => Close()" type="button" class="close btn btn-secondary" data-dismiss="modal" aria-label="Close">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            
            <div class="row modal-body">
                <div class="col-3"><label for="title" class="form-label">Rediger titel</label></div>
                <div class="col-1" />
                <div class="col-3"><label class="form-label">Rediger synlighed</label> <br /></div>
                <div class="col-2"><label for="author" class="form-label">Ikon</label></div>
                <div class="col-2"><label class="form-label">Farve</label> <br /></div>
            </div>
            
            @foreach (var category in InformationBoard.Categories)
            {
                <div class="row modal-body">
                    <div class="col-3">
                        <input type="text" class="form-control" id="title" placeholder="" @bind-value="@category.CategoryModel.Title" />
                    </div>
                    <div class="col-1">
                        <button data-dismiss="modal" class="btn btn-danger" @onclick="() => CloseAndOpenDeleteCategory(category)"><i class="bi bi-trash"></i></button>
                    </div>
                    <div class="col-3">
                        <button class="btn btn-success"><i class="bi bi-eye"></i> Offentlig</button>
                        <button class="btn btn-danger"><i class="bi bi-eye-slash"></i> Ikke offentlig</button>
                    </div>
                    <div class="col-2">
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                Dropdown button
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                <li><a class="dropdown-item" href="#">Action</a></li>
                            </ul>
                        </div>
                    </div>
                    <div class="col-2">
                        <button class="btn btn-primary" disabled>Vælg tema farve</button>
                    </div>
                    <div class="col-1 mx-auto">
                        <button class="btn my-0 py-0"><i class="bi bi-arrow-up-circle" style="font-size: 25px"></i></button>
                        <br />
                        <button class="btn my-0 py-0"><i class="bi bi-arrow-down-circle" style="font-size: 25px"></i></button>
                    </div>
                </div>
            }
            

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => Close()">Annuller</button>
                <button type="submit" class="btn btn-success" @onclick="() => SaveAndClose()">Gem</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    private ManagementPages.UI.Components.Modals.DeleteCategory DeleteCategory { get; set; }

    [Parameter]
    public IInformationBoardViewModel InformationBoard { get; set; }

    [Parameter]
    public EventCallback OnChangesMade { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void CloseAndOpenDeleteCategory(ICategoryViewModel category)
    {
        Close();
        DeleteCategory.Open(category);
    }

    private void SaveAndClose()
    {
        foreach (var category in InformationBoard.Categories)
        {
            category.EditCategory(category.CategoryModel.CategoryId, _dbService);
        }
        Close();
        OnChangesMade.InvokeAsync();
    }

    private async Task OnChangesMadeInChildComponent()
    {
        //InformationBoard.Categories = await _dbService.GetCategories(InformationBoard.InformationBoardModel.InformationBoardId);
        await OnChangesMade.InvokeAsync();
        StateHasChanged();
    }

}
